# Script to check COLIBRE galaxies for recent mergers. Takes a list of galaxy IDs (e.g. from selection.py) and determines how many mergers have occurred.
# Merging galaxies must have sufficient mass and mergers must have occurred recently to be counted.
# JG McGregor
# May 2025 

import os
import argparse
import numpy as np
import h5py
import collections

def read(model_dir, snapshot, fields, subvolumes):
    """Read the galaxies.hdf5 file for the given model/snapshot/subvolume"""

    data = collections.OrderedDict()
    for idx, subv in enumerate(subvolumes):
        fname = model_dir + snapshot + '/SubSnap_' + snapshot + '.' + str(subv) + ".hdf5"
        #fname = os.path.join(model_dir, str(snapshot), str(subv), 'extinction.hdf5')
        with h5py.File(fname, 'r') as f:
            for gname, dsnames in fields.items():
                group = f[gname]
                for dsname in dsnames:
                    full_name = '%s/%s' % (gname, dsname)
                    l = data.get(full_name, None)
                    if l is None:
                        l = group[dsname][()]
                    else:
                        l = np.concatenate([l, group[dsname][()]])
                    data[full_name] = l

    return list(data.values())

def find_nearest_idx(x,arr): # does what it says
    diff_arr = np.absolute(arr-x)
    index = diff_arr.argmin()
    return index


parser = argparse.ArgumentParser()
parser.add_argument("device", help="local, cosma, or hyades")
parser.add_argument("length", help="length, LXXX")
parser.add_argument("mres", help="mass res, mX")
parser.add_argument("snap", help="snapshot number", type=int)
args = parser.parse_args()

device = args.device
length = args.length # The box length for this run
mres = args.mres # The mass res for this run
snap = args.snap # The snap number [0 to 127]
run = length+"_"+mres

if device != "cosma":
    print("This device does not contain HBT files, and is not supported :(")
    exit()

snapfile=np.load('tables/output_list_ext.npy') # contains z and t_lookback for each snap
redshifts=snapfile[:,1]
lbts=snapfile[:,2]

z=redshifts[snap]
z_short = str(round(z,4)) # used for file naming - should suffice for all snap/snipshot redshifts
lookback_time=lbts[snap]

max_time = 0.5 # how far back should we check for mergers (in Gyr)
SnapThresh = find_nearest_idx(lookback_time+max_time,lbts) # how far back should we check (in snaps)

filename = 'tables/targets_'+run+'_z'+z_short+'.npy'
targetfile = np.load(filename) # the list of target IDs, generated by selection.py
SOAP_IDs = targetfile[:,0] # indices in the relevant SOAP file
HBT_IDs = targetfile[:,1] # HBT TrackIds
num_mergers=np.zeros_like(HBT_IDs) # how many (relevant) mergers have occurred
ngal=len(SOAP_IDs)

fields = {'Subhalos': ("TrackId", "DescendantTrackId", "SnapshotIndexOfDeath", "Mbound", "LastMaxMass")}
model_dir = "/cosma8/data/dp004/colibre/Runs/"+run+"/THERMAL_AGN_"+mres+"/HBTplus/"
snap3 = str(snap).zfill(3) # adds leading 0s to make a 3-digit string
HBTfile = read(model_dir,snap3,fields,range(16)) # gathers requested data from all HBT files for this snapshot
TrackIDs = HBTfile[0]
DescIDs = HBTfile[1]
DeathSnaps = HBTfile[2]
MassNow = HBTfile[3]
MassMax = HBTfile[4]

for i in range(ngal):
    HBT_ID=HBT_IDs[i]
    host = (TrackIDs==HBT_ID)
    MassHost = MassNow[host]
    MassThresh = 0.05*MassHost # mass cut-off for merger - I know it's non-standard

    mergers = (DescIDs==HBT_ID) # merging galaxies...
    massive = (MassMax>=MassThresh) # ...must be big enough...
    recent = (DeathSnaps>=SnapThresh) #...and have merged recently
    m_mergers = (mergers&massive&recent)

    num_mergers[i] = np.sum(m_mergers) #number of mergers for this galaxy

savefile = np.column_stack((SOAP_IDs,HBT_IDs,num_mergers))
tablename = 'tables/targetmergers_' + run + '_z' + str(z_short)
txtname = tablename + '.txt'
np.save(tablename, savefile) # saves target IDs (SOAP and HBT) and no. mergers to file
np.savetxt(txtname, savefile, fmt="%i")